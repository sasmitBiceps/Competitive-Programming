# Geany's snippets configuration file for Shivang

# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.

# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
#brace_open=\n{\n\t
#brace_close=}\n
#block=\n{\n\t%cursor%\n}
block_cursor={\n\t\n}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
#[Keybindings]
#for=<Ctrl>7


[C++]
if=if(%cursor%)%block_cursor%
else=else{\n\t%cursor%\n}
for=for(int i = 0; i < %cursor%; i++)%block_cursor%
rev=for(int i = %cursor%; i >= 0; i--)%block_cursor%
forj=for(int j = 0; j < %cursor%; j++)%block_cursor%
revj=for(int j = %cursor%; j >= 0; j--)%block_cursor%
fork=for(int k = 0; k < %cursor%; k++)%block_cursor%
revk=for(int k = %cursor%; k >= 0; k--)%block_cursor%
while=while(%cursor%)%block_cursor%
dijkstra=int n,m;\nvector<vector<pair<int,int>>> graph; // id,weight\nint dist[200005],pre[200005];\nvoid dijkstra(int start){\n\tfor(int i{0};i < n;i++){\n\t\tdist[i] = INT_MAX;\n\t\tpre[i] = -1;\n\t}\n\tdist[start] = 0;\n\tset<pair<int,int>> pq; // distance,id\n\tpq.insert({0,start});\n\twhile(!pq.empty()){\n\t\tint top = pq.begin()->second;\n\t\tpq.erase(pq.begin());\n\t\tfor(auto node : graph[top]){\n\t\t\tif(dist[node.first] > dist[top] + node.second){\n\t\t\t\tdist[node.first] = dist[top] + node.second;\n\t\t\t\tpre[node.first] = top;\n\t\t\t\tpq.insert({dist[node.first],node.first});\n\t\t\t}\n\t\t}\n\t}\n}\n
segtree=template<typename T>\nstruct segment{\n\tT *tree,identity; // Tree should be of the data type of the values needed\n\tint n;\n\tint *arr; // Only find can't change\n\tsegment(int a[],int siz){\n\t\tarr = a;\n\t\tn = siz;\n\t\tidentity = %cursor%; // Set the identity element here\n\t\tif (siz && !(siz & (siz - 1)));\n\t\telse{\n\t\t\tint count = 0;\n\t\t\twhile(siz != 0){  \n\t\t\t\tsiz >>= 1;\n\t\t\t\tcount ++;\n\t\t\t}\n\t\t\tsiz = 1 << count;\n\t\t}\n\t\ttree = new T[2*siz];\n\t\tconstruct(0,0,n-1,a);\n\t}\n\tT combine(T v1,T v2){\n\t\treturn %cursor%;// combination of v1 and v2\n\t}\n\tT unit(int x){ \n\t\treturn %cursor%; // value of a single element\n\t}\n\tvoid construct(int node, int start, int end,int a[]){\n\t\tif(start == end){    \n\t\t\ttree[node] = unit(a[start]);\n\t\t}\n\t\telse{\n\t\t\tint mid = (start+end)/2;\n\t\t\tconstruct(2*node+1,start,mid,a);\n\t\t\tconstruct(2*node+2,mid+1,end,a);\n\t\t\ttree[node] = combine(tree[2*node+1],tree[2*node+2]);\n\t\t}\n\t}\n\tT find(int start,int end){ // evaluate the value of (a[start],...,a[end])\n\t\treturn query(0,0,n-1,start,end);\n\t}\n\tT query(int node,int start,int end,int l,int r){\n\t\tif(l > end || start > r){     \n\t\t\treturn identity; // return default value here\n\t\t}\n\t\tif(l <= start && r >= end){\n\t\t\treturn tree[node];\n\t\t}\n\t\tint mid = (start+end)/2;\n\t\treturn combine(query(2*node+1,start,mid,l,r),query(2*node+2,mid+1,end,l,r));\n\t}\n\tvoid update(int index,int val){ // change a[index] to val\n\t\tchange(0,0,n-1,index,unit(val));\n\t}\n\tvoid change(int node,int start,int end,int idx,T val){\n\t\tif(start == end){\n\t\t\ttree[node] = val;\n\t\t}\n\t\telse{\n\t\t\tint mid = (start + end)/2;\n\t\t\tif(idx >= start && idx <= mid){\n\t\t\t\tchange(2*node+1,start,mid,idx,val);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tchange(2*node+2,mid+1,end,idx,val);\n\t\t\t}\n\t\t\ttree[node] = combine(tree[2*node+1],tree[2*node+2]);\n\t\t}\n\t}\n};\n
sparse=template<typename T>\nstruct sparse{\n\tvector<int> log;\n\tvector<vector<T>> st;\n\tsparse(T a[],int n){\n\t\tlog.resize(n+5);\n\t\tst.resize(n+2,vector<int>(26));\n\t\tlog[1] = 0;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tlog[i] = log[i/2] + 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tst[i][0] = a[i];\n\t\t}\n\t\tfor(int j = 0; j <= 25; j++){\n\t\t\tfor(int i = 0; i + (1 << j) <= n; i++){\n\t\t\t\tst[i][j] = min(st[i][j-1], st[i + (1 << (j - 1))][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\tsparse(vector<T> &a){\n\t\tint n = a.size();\n\t\tlog.resize(n+5);\n\t\tst.resize(n+2,vector<T>(26));\n\t\tlog[1] = 0;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tlog[i] = log[i/2] + 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tst[i][0] = a[i];\n\t\t}\n\t\tfor(int j = 1; j <= 25; j++){\n\t\t\tfor(int i = 0; i + (1 << j) <= n; i++){\n\t\t\t\tst[i][j] = combine(st[i][j-1], st[i + (1 << (j - 1))][j - 1]);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tint query(int L,int R){\n\t\tint j = log[R - L + 1];\n\t\treturn combine(st[L][j], st[R - (1 << j) + 1][j]);\n\t}\n\tT combine(T v1,T v2){\n\t\treturn %cursor%(v1,v2); // Only for min and max\n\t}\n};\n
lca=struct LCA {\n\tvector<int> height, euler, first, segtree;\n\tvector<bool> visited;\n\tint n;\n\n\tLCA(vector<vector<int>> &adj, int root = 0) {\n\t\tn = adj.size();\n\t\theight.resize(n);\n\t\tfirst.resize(n);\n\t\teuler.reserve(n * 2);\n\t\tvisited.assign(n, false);\n\t\tdfs(adj, root);\n\t\tint m = euler.size();\n\t\tsegtree.resize(m * 4);\n\t\tbuild(1, 0, m - 1);\n\t}\n\n\tvoid dfs(vector<vector<int>> &adj, int node, int h = 0) {\n\t\tvisited[node] = true;\n\t\theight[node] = h;\n\t\tfirst[node] = euler.size();\n\t\teuler.push_back(node);\n\t\tfor (auto to : adj[node]) {\n\t\t\tif (!visited[to]) {\n\t\t\t\tdfs(adj, to, h + 1);\n\t\t\t\teuler.push_back(node);\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid build(int node, int b, int e) {\n\t\tif (b == e) {\n\t\t\tsegtree[node] = euler[b];\n\t\t} else {\n\t\t\tint mid = (b + e) / 2;\n\t\t\tbuild(node << 1, b, mid);\n\t\t\tbuild(node << 1 | 1, mid + 1, e);\n\t\t\tint l = segtree[node << 1], r = segtree[node << 1 | 1];\n\t\t\tsegtree[node] = (height[l] < height[r]) ? l : r;\n\t\t}\n\t}\n\n\tint query(int node, int b, int e, int L, int R) {\n\t\tif (b > R || e < L)\n\t\t\treturn -1;\n\t\tif (b >= L && e <= R)\n\t\t\treturn segtree[node];\n\t\tint mid = (b + e) >> 1;\n\n\t\tint left = query(node << 1, b, mid, L, R);\n\t\tint right = query(node << 1 | 1, mid + 1, e, L, R);\n\t\tif (left == -1) return right;\n\t\tif (right == -1) return left;\n\t\treturn height[left] < height[right] ? left : right;\n\t}\n\n\tint lca(int u, int v) {\n\t\tint left = first[u], right = first[v];\n\t\tif (left > right)\n\t\t\tswap(left, right);\n\t\treturn query(1, 0, euler.size() - 1, left, right);\n\t}\n};\n
dsu=template<typename T>\nstruct dsu{\n\tint n,*parent;\n\tT *arr;\n\tdsu(T a[],int siz){\n\t\tarr = a;\n\t\tn = siz;\n\t\tparent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmake(i);\n\t\t}\n\t}\n\tbool cmp(int a, int b){ // Give indices here\n\t\treturn %cursor%//arr[a] > arr[b];\n\t}\n\tvoid make(int v){ \n\t\tparent[v] = v;\n\t}\n\tint find_set(int v){ // Give index here\n\t\tif(v == parent[v])return v;\n\t\treturn parent[v] = find_set(parent[v]);\n\t}\n\tT find(int v){ // Give index here\n\t\treturn arr[find_set(v)];\n\t}\n\tvoid combine(int a, int b){ // Give indices here\n\t\ta = find_set(a);\n\t\tb = find_set(b);\n\t\tif(a != b){\n\t\t\tif(cmp(a,b))swap(a,b);\n\t\t\tparent[b] = a;\n\t\t}\n\t}\n};\n
fft=const int mod = 998244353;\n\nstruct base {\n\tdouble x, y;\n\tbase(){\n\t\tx = y = 0;\n\t}\n\tbase(double a, double b){\n\t\tx = a;\n\t\ty = b;\n\t}\n};\ninline base operator + (base a, base b) { return base(a.x + b.x, a.y + b.y); }\ninline base operator - (base a, base b) { return base(a.x - b.x, a.y - b.y); }\ninline base operator * (base a, base b) { return base(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); }\ninline base conj(base a) { return base(a.x, -a.y); }\nint lim = 1;\nvector<base> roots = {{0, 0}, {1, 0}};\nvector<int> rev = {0, 1};\nconst double PI = acosl(- 1.0);\nvoid ensure_base(int p){\n\tif(p <= lim) return;\n\trev.resize(1 << p);\n\tfor(int i = 0; i < (1 << p); i++)\n\t\trev[i] = (rev[i >> 1] >> 1) + ((i & 1)  <<  (p - 1));\n\troots.resize(1 << p);\n\twhile(lim < p) {\n\t\tdouble angle = 2 * PI / (1 << (lim + 1));\n\t\tfor(int i = 1 << (lim - 1); i < (1 << lim); i++){\n\t\t\troots[i << 1] = roots[i];\n\t\t\tdouble angle_i = angle * (2 * i + 1 - (1 << lim));\n\t\t\troots[(i << 1) + 1] = base(cos(angle_i), sin(angle_i));\n\t\t}\n\t\tlim++;\n\t}\n}\nvoid fft(vector<base> &a, int n = -1) {\n\tif(n == -1) n = a.size();\n\tassert((n & (n - 1)) == 0);\n\tint zeros = __builtin_ctz(n);\n\tensure_base(zeros);\n\tint shift = lim - zeros;\n\tfor(int i = 0; i < n; i++)if(i < (rev[i] >> shift)) swap(a[i], a[rev[i] >> shift]);\n\tfor(int k = 1; k < n; k <<= 1) {\n\t\tfor(int i = 0; i < n; i += 2 * k) {\n\t\t\tfor(int j = 0; j < k; j++) {\n\t\t\t\tbase z = a[i + j + k] * roots[j + k];\n\t\t\t\ta[i + j + k] = a[i + j] - z;a[i + j] = a[i + j] + z;\n\t\t\t}\n\t\t}\n\t}\n}\nvector<int> multiply(vector<int> &a, vector<int> &b, bool eq = 0){\n\tint need = a.size() + b.size() - 1;\n\tint p = 0;\n\twhile((1 << p) < need)p++;\n\tensure_base(p);\n\tint sz = 1 << p;\n\tvector<base> A, B;\n\tif(sz > (int)A.size()) A.resize(sz);\n\tfor(int i = 0; i < (int)a.size(); i++){\n\t\tint x = (a[i] % mod + mod) % mod;\n\t\tA[i] = base(x & ((1 << 15) - 1), x >> 15);\n\t}\n\tfill(A.begin() + a.size(), A.begin() + sz, base{0, 0});\n\tfft(A, sz);\n\tif(sz > (int)B.size()) B.resize(sz);\n\tif(eq) copy(A.begin(), A.begin() + sz, B.begin());\n\t\telse{\n\tfor(int i = 0; i < (int)b.size(); i++){\n\t\t\tint x = (b[i] % mod + mod) % mod;\n\t\t\tB[i] = base(x & ((1 << 15) - 1), x >> 15);\n\t\t}\n\t\tfill(B.begin() + b.size(), B.begin() + sz, base{0, 0});\n\t\tfft(B, sz);\n\t}\n\tdouble ratio = 0.25 / sz;\n\tbase r2(0,  - 1), r3(ratio, 0), r4(0,  - ratio), r5(0, 1);\n\tfor(int i = 0; i <= (sz >> 1); i++) {\n\t\tint j = (sz - i) & (sz - 1);\n\t\tbase a1 = (A[i] + conj(A[j])), a2 = (A[i] - conj(A[j])) * r2;\n\t\tbase b1 = (B[i] + conj(B[j])) * r3, b2 = (B[i] - conj(B[j])) * r4;\n\t\tif(i != j) {\n\t\t\tbase c1 = (A[j] + conj(A[i])), c2 = (A[j] - conj(A[i])) * r2;\n\t\t\tbase d1 = (B[j] + conj(B[i])) * r3, d2 = (B[j] - conj(B[i])) * r4;\n\t\t\tA[i] = c1 * d1 + c2 * d2 * r5;\n\t\t\tB[i] = c1 * d2 + c2 * d1;\n\t\t}\n\t\tA[j] = a1 * b1 + a2 * b2 * r5;\n\t\tB[j] = a1 * b2 + a2 * b1;\n\t}\n\tfft(A, sz); fft(B, sz);\n\tvector<int> res(need);\n\tfor(int i = 0; i < need; i++){\n\t\tlong long aa = A[i].x + 0.5;\n\t\tlong long bb = B[i].x + 0.5;\n\t\tlong long cc = A[i].y + 0.5;\n\t\tres[i] = (aa + ((bb % mod) << 15) + ((cc % mod) << 30))%mod;\n\t}\n\treturn res;\n}\n
modular=template <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n\tT t = m / a;\n\tm -= t * a; swap(a, m);\n\tu -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n \ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n \n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n\tvalue = normalize(x);\n  }\n \n  template <typename U>\n  static Type normalize(const U& x) {\n\tType v;\n\tif (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n\telse v = static_cast<Type>(x % mod());\n\tif (v < 0) v += mod();\n\treturn v;\n  }\n \n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n \n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n \n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n\tvalue = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n\treturn *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int64_t>::value, Modular>::type& operator*=(const Modular& rhs) {\n\tint64_t q = static_cast<int64_t>(static_cast<long double>(value) * rhs.value / mod());\n\tvalue = normalize(value * rhs.value - q * mod());\n\treturn *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n\tvalue = normalize(value * rhs.value);\n\treturn *this;\n  }\n \n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n \n  template <typename U>\n  friend const Modular<U>& abs(const Modular<U>& v) { return v; }\n \n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n \n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n \n  template <typename U>\n  friend std::istream& operator>>(std::istream& stream, Modular<U>& number);\n \n private:\n  Type value;\n};\n \ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n \ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n \ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n \ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n \ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n \ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n \ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n\tif (p & 1) res *= x;\n\tx *= x;\n\tp >>= 1;\n  }\n  return res;\n}\n \ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n \ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n \ntemplate <typename T>\nstd::ostream& operator<<(std::ostream& stream, const Modular<T>& number) {\n  return stream << number();\n}\n \ntemplate <typename T>\nstd::istream& operator>>(std::istream& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, int64_t>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n \nconstexpr int md = (int) 1e9 + 7;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n
cst=template<typename T>\nstruct cst{ // const is important\n\tbool operator()(const T& v1, const T& v2){\n\t\treturn %cursor%; // (v1 < v2) : if true then v1 is before v2\n\t}\n};\n
tree=int n;\ncin >> n;\nvector<vector<int>> graph(n);\nfor(int i = 0; i < n-1; i++){\n\tint u,v;\n\tcin >> u >> v;\n\tu--;v--;\n\tgraph[u].pb(v);\n\tgraph[v].pb(u);\n}\n
graph=int n,m;\ncin >> n >> m;\nvector<vector<int>> graph(n);\nfor(int i = 0; i < m; i++){\n\tint u,v;\n\tcin >> u >> v;\n\tu--;v--;\n\tgraph[u].pb(v);\n\tgraph[v].pb(u);\n}\n
graphw=int n,m;\ncin >> n >> m;\nvector<vector<pair<int,int>>> graph(n);\nfor(int i = 0; i < m; i++){\n\tint u,v,w;\n\tcin >> u >> v >> w;\n\tu--;v--;\n\tgraph[u].pb({v,w});\n\t//graph[v].pb({u,w});\n}\n
lb=lower_bound(%cursor%.begin(),%cursor%.end(),%cursor%); // returns first value >= val\n
ub=upper_bound(%cursor%.begin(),%cursor%.end(),%cursor%); // returns first value > val\n
sieve=vector<bool> prime;\nvoid sieve(int n_n = 1000000){\n\tprime.resize(n_n+5,true);\n\tprime[0] = prime[1] = false;\n\tfor(int i = 2; i*i <= n_n; i++){\n\t\tif(!prime[i])continue;\n\t\tfor(int j = 2; i*j <= n_n; j++){\n\t\t\tprime[i*j] = false;\n\t\t}\n\t}\n}\n
factor=vector<int> smallest_factor;\nvector<bool> prime;\nvector<int> primes;\nvoid sieve(int maximum = 1e6) {\n\tmaximum = max(maximum, 1);\n\tsmallest_factor.assign(maximum + 1, 0);\n\tprime.assign(maximum + 1, true);\n\tprime[0] = prime[1] = false;\n\tprimes = {};\n\tfor(int p = 2; p <= maximum; p++){\n\t\tif(prime[p]) {\n\t\t\tsmallest_factor[p] = p;\n\t\t\tprimes.push_back(p);\n\t\t\tfor(ll i = (ll)(p) * p; i <= maximum; i += p){\n\t\t\t\tif (prime[i]) {\n\t\t\t\t\tprime[i] = false;\n\t\t\t\t\tsmallest_factor[i] = p;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n// Prime factorizes n in worst case O(sqrt n / log n). Requires having run `sieve` up to at least sqrt(n).\n// If we've run `sieve` up to at least n, takes O(log n) time.\nvector<pair<ll, int>> prime_factorize(ll n){ // Prime,exponent\n\tll sieve_max = (ll)(smallest_factor.size()) - 1;\n\tassert(1 <= n && n <= sieve_max * sieve_max);\n\tvector<pair<ll, int>> result;\n\tif(n <= sieve_max){\n\t\twhile(n != 1){\n\t\t\tll p = smallest_factor[n];\n\t\t\tint exponent = 0;\n\t\t\tdo{\n\t\t\t\tn /= p;\n\t\t\t\texponent++;\n\t\t\t} while (n % p == 0);\n\t\t\tresult.emplace_back(p, exponent);\n\t\t}\n\t\treturn result;\n\t}\n\tfor(ll p : primes){\n\t\tif(p * p > n)\n\t\t\tbreak;\n\t\tif(n % p == 0){\n\t\t\tresult.emplace_back(p, 0);\n\t\t\tdo{\n\t\t\t\tn /= p;\n\t\t\t\tresult.back().second++;\n\t\t\t} while (n % p == 0);\n\t\t}\n\t}\n\tif(n > 1)\n\t\tresult.emplace_back(n, 1);\n\treturn result;\n}\n
array=int n;\ncin >> n;\nvector<int> a(n);\nfor(int i = 0; i < n; i++){\n\tcin >> a[i];\n}\n
arrayll=int n;\ncin >> n;\nvector<ll> a(n);\nfor(int i = 0; i < n; i++){\n\tcin >> a[i];\n}\n
array2d=int n,m;\ncin >> n >> m;\nvector<vector<int>> a(n,vector<int>(m));\nfor(int i = 0; i < n; i++){\n\tfor(int j = 0; j < m; j++){\n\t\tcin >> a[i][j];\n\t}\n}\n
bord=int n,m;\ncin >> n >> m;\nvector<vector<char>> bord(n,vector<char>(m));\nfor(int i = 0; i < n; i++){\n\tfor(int j = 0; j < m; j++){\n\t\tcin >> bord[i][j];\n\t}\n}\n
test=//Har Har Mahadev\nusing namespace std;\n#include <bits/stdc++.h>\n#define booga cerr << "booga" << endl\n#define ll long long int\n#define ld long double\n#define pb push_back\n#define mp make_pair\n#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)\n#define safai(...) Clearing_out(__VA_ARGS__)\n\n\ntemplate <typename A, typename B>\n\tstring to_string(pair<A, B> p);\n \ntemplate <typename A, typename B, typename C>\n\tstring to_string(tuple<A, B, C> p);\n \ntemplate <typename A, typename B, typename C, typename D>\n\tstring to_string(tuple<A, B, C, D> p);\n \nstring to_string(const string& s) {\n\treturn '"' + s + '"';\n}\n\nstring to_string(char c) {\n\tstring s;\n\ts += c;\n\treturn s;\n}\n\nstring to_string(const char* s) {\n\treturn to_string((string) s);\n}\n \nstring to_string(bool b) {\n\treturn (b ? "1" : "0");\n}\n \nstring to_string(vector<bool> v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (int i = 0; i < static_cast<int>(v.size()); i++) {\n\tif (!first) {\n\t\tres += ", ";\n\t}\n\tfirst = false;\n\tres += to_string(v[i]);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n\tstring res = "";\n\tfor (size_t i = 0; i < N; i++) {\n\t\tres += static_cast<char>('0' + v[i]);\n\t}\n\treturn res;\n}\n \ntemplate <typename A>\nstring to_string(A v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (const auto &x : v) {\n\t\tif (!first) {\n\t\t\tres += ", ";\n\t\t}\n\t\tfirst = false;\n\t\tres += to_string(x);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n\treturn "(" + to_string(p.first) + ", " + to_string(p.second) + ")";\n}\n \ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";\n}\n \ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";\n}\n \nvoid debug_out() { cerr << endl; }\n \ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n\tcerr << " " << to_string(H);\n\tdebug_out(T...);\n}\n\nvoid Clearing_out() { return; }\n\ntemplate <typename Head, typename... Tail>\nvoid Clearing_out(Head &H, Tail & ... T) {\n\tH.clear();\n\tClearing_out(T...);\n}\n\nvoid testcase(){\n\t%cursor%\n}\n\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint tt = 1;\n\tcin >> tt;\n\twhile(tt--){\n\t\ttestcase();\n\t}\n\treturn 0;\n}\n
notest=//Har Har Mahadev\nusing namespace std;\n#include <bits/stdc++.h>\n#define booga cerr << "booga" << endl\n#define ll long long int\n#define ld long double\n#define pb push_back\n#define mp make_pair\n#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)\n#define safai(...) Clearing_out(__VA_ARGS__)\n\n\ntemplate <typename A, typename B>\n\tstring to_string(pair<A, B> p);\n \ntemplate <typename A, typename B, typename C>\n\tstring to_string(tuple<A, B, C> p);\n \ntemplate <typename A, typename B, typename C, typename D>\n\tstring to_string(tuple<A, B, C, D> p);\n \nstring to_string(const string& s) {\n\treturn '"' + s + '"';\n}\n\nstring to_string(char c) {\n\tstring s;\n\ts += c;\n\treturn s;\n}\n\nstring to_string(const char* s) {\n\treturn to_string((string) s);\n}\n \nstring to_string(bool b) {\n\treturn (b ? "1" : "0");\n}\n \nstring to_string(vector<bool> v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (int i = 0; i < static_cast<int>(v.size()); i++) {\n\tif (!first) {\n\t\tres += ", ";\n\t}\n\tfirst = false;\n\tres += to_string(v[i]);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n\tstring res = "";\n\tfor (size_t i = 0; i < N; i++) {\n\t\tres += static_cast<char>('0' + v[i]);\n\t}\n\treturn res;\n}\n \ntemplate <typename A>\nstring to_string(A v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (const auto &x : v) {\n\t\tif (!first) {\n\t\t\tres += ", ";\n\t\t}\n\t\tfirst = false;\n\t\tres += to_string(x);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n\treturn "(" + to_string(p.first) + ", " + to_string(p.second) + ")";\n}\n \ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";\n}\n \ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";\n}\n \nvoid debug_out() { cerr << endl; }\n \ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n\tcerr << " " << to_string(H);\n\tdebug_out(T...);\n}\n\nvoid Clearing_out() { return; }\n\ntemplate <typename Head, typename... Tail>\nvoid Clearing_out(Head &H, Tail & ... T) {\n\tH.clear();\n\tClearing_out(T...);\n}\n\nvoid testcase(){\n\t%cursor%\n}\n\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint tt = 1;\n\t//cin >> tt;\n\twhile(tt--){\n\t\ttestcase();\n\t}\n\treturn 0;\n}\n
codejam=//Har Har Mahadev\nusing namespace std;\n#include <bits/stdc++.h>\n#define booga cerr << "booga" << endl\n#define ll long long int\n#define ld long double\n#define pb push_back\n#define mp make_pair\n#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)\n#define safai(...) Clearing_out(__VA_ARGS__)\n\n\ntemplate <typename A, typename B>\n\tstring to_string(pair<A, B> p);\n \ntemplate <typename A, typename B, typename C>\n\tstring to_string(tuple<A, B, C> p);\n \ntemplate <typename A, typename B, typename C, typename D>\n\tstring to_string(tuple<A, B, C, D> p);\n \nstring to_string(const string& s) {\n\treturn '"' + s + '"';\n}\n\nstring to_string(char c) {\n\tstring s;\n\ts += c;\n\treturn s;\n}\n\nstring to_string(const char* s) {\n\treturn to_string((string) s);\n}\n \nstring to_string(bool b) {\n\treturn (b ? "1" : "0");\n}\n \nstring to_string(vector<bool> v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (int i = 0; i < static_cast<int>(v.size()); i++) {\n\tif (!first) {\n\t\tres += ", ";\n\t}\n\tfirst = false;\n\tres += to_string(v[i]);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n\tstring res = "";\n\tfor (size_t i = 0; i < N; i++) {\n\t\tres += static_cast<char>('0' + v[i]);\n\t}\n\treturn res;\n}\n \ntemplate <typename A>\nstring to_string(A v) {\n\tbool first = true;\n\tstring res = "{";\n\tfor (const auto &x : v) {\n\t\tif (!first) {\n\t\t\tres += ", ";\n\t\t}\n\t\tfirst = false;\n\t\tres += to_string(x);\n\t}\n\tres += "}";\n\treturn res;\n}\n \ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n\treturn "(" + to_string(p.first) + ", " + to_string(p.second) + ")";\n}\n \ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";\n}\n \ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n\treturn "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";\n}\n \nvoid debug_out() { cerr << endl; }\n \ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n\tcerr << " " << to_string(H);\n\tdebug_out(T...);\n}\n\nvoid Clearing_out() { return; }\n\ntemplate <typename Head, typename... Tail>\nvoid Clearing_out(Head &H, Tail & ... T) {\n\tH.clear();\n\tClearing_out(T...);\n}\n\nvoid testcase(){\n\t%cursor%\n}\n\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint tt = 1,casen = 1;\n\tcin >> tt;\n\twhile(tt--){\n\t\tcout << "Case #" << casen << ": ";\n\t\ttestcase();\n\t\tcasen++;\n\t}\n\treturn 0;\n}\n
f=first
s=second
b=begin()
e=end()
pii=pair<int,int> 
pll= pair<ll,ll> 
vec=vector<%cursor%>
set=set<%cursor%>
map=map<%cursor%,%cursor%>
vi=vector<int> 
vll=vector<ll> 
vc=vector<char> 
vb=vector<bool> 
vs=vector<string> 
vpii=vector<pair<int,int>> 
vpll=vector<pair<ll,ll>> 
vvi=vector<vector<int>> 
vvll=vector<vector<ll>> 
vvc=vector<vector<char>> 
mpii=map<int,int> 
mpci=map<char,int> 
be=%cursor%.begin(),%cursor%.end()
re=resize(%cursor%)
sort=sort(%cursor%.begin(),%cursor%.end());
rsort=sort(%cursor%.rbegin(),%cursor%.rend());
sortcst=sort(%cursor%.begin(),%cursor%.end(),[&](%cursor% &v1,%cursor% &v2){\n\treturn %cursor%; // (v1 < v2) : if true then v1 is before v2\n});\n
reverse=reverse(%cursor%.begin(),%cursor%.end());
power=ll power(ll x, ll y){\n\tll res = 1;\n\tx = x % mod;\n\tif (x == 0) return 0;\n\twhile (y > 0){\n\t\tif (y & 1)\n\t\t\tres = (res*x) % mod;\n\t\ty = y >> 1;\n\t\tx = (x*x) % mod;\n\t}\n\treturn res;\n}\n
ncr=const int MXN = 1e6 + 5;\nconst ll mod = 1e9 + 7;\nll fac[MXN],invfac[MXN];\nll power(ll x, ll y){\n\tll res = 1;\n\tx = x % mod;\n\tif (x == 0) return 0;\n\twhile (y > 0){\n\t\tif (y & 1)\n\t\t\tres = (res*x) % mod;\n\t\ty = y >> 1;\n\t\tx = (x*x) % mod;\n\t}\n\treturn res;\n}\nvoid prep(){ // Don't forget to call this\n\tfac[0] = 1;\n\tfor(int i = 1; i < MXN; i++){\n\t\tfac[i] = fac[i-1]*i;\n\t\tfac[i] %= mod;\n\t}\n\tinvfac[MXN-1] = power(fac[MXN-1],mod-2);\n\tfor(int i = MXN-2; i >= 0; i--){\n\t\tinvfac[i] = invfac[i+1]*(i+1);\n\t\tinvfac[i] %= mod;\n\t}\n}\nll C(int n,int r){\n\tif(n < r)return 0;\n\treturn ((fac[n]*invfac[r])%mod * invfac[n-r])%mod;\n}\n
#########################################################################
simple=#include <iostream>\nusing namespace std;\n\nint main(){\n\t%cursor%\n\treturn 0;\n}\n
basic=#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\t%cursor%\n\treturn 0;\n}\n
#[C]
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[Java]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%
#{=%\n{\n\t%cursor%\n}%
#[PHP]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[Javascript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[C#]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[Vala]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[ActionScript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

#[Python]
#for=for i in range(%cursor%):\n\t
#if=if %cursor%:\n\t
#elif=elif %cursor%:\n\t
#else=else:\n\t
#while=while %cursor%:\n\t
#try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
#with=with %cursor%:\n\t
#def=def %cursor% (%cursor%):\n\t""" Function doc """\n\t
#class=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass

#[Ferite]
#iferr=iferr%block_cursor%fix%block%
#monitor=monitor%block_cursor%handle%block%

#[Haskell]

#[HTML]
#table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>

#[Erlang]
#case=case %cursor% of\n\t%cursor% -> %cursor%\nend
#if=if\n\t%cursor% -> %cursor%\nend
#begin=begin\n\t%cursor%\nend
#fun=fun(%cursor%) ->\n\t%cursor%\nend
#try=try %cursor% of\n\t%cursor% ->\n\t%cursor%\ncatch\n\t%cursor% ->\n\t%cursor%\nend
#module=-module(%cursor%).
#export=-export(%cursor%).
#compile=-compile(%cursor%).
#include=-include(%cursor%).


